name: Test Suite

on:
  push:
    branches: [ main, phase0-validation ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        # Core dependencies for library
        pip install pandas numpy matplotlib seaborn pyarrow
        # Additional dependencies for validation
        pip install pillow  # For GIF generation
        
        # Install any additional requirements if they exist
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test Python imports and basic functionality
      run: |
        # Test that core libraries can be imported
        python -c "
import sys
import os
sys.path.append('source/lib/python')
try:
    from locomotion_analysis import LocomotionData
    print('✓ LocomotionData library import successful')
except ImportError as e:
    print(f'✗ LocomotionData import failed: {e}')
    exit(1)
"

    - name: Test validation system imports
      run: |
        # Test validation system imports
        python -c "
import sys
sys.path.append('source')
try:
    from validation.step_classifier import StepClassifier
    print('✓ StepClassifier import successful')
    from validation.validation_expectations_parser import parse_kinematic_validation_expectations
    print('✓ Validation parser import successful')
except ImportError as e:
    print(f'✗ Validation system import failed: {e}')
    exit(1)
"

    - name: Test basic library functionality (simplified)
      run: |
        # Create minimal test data and test library functionality
        python -c "
import sys
import pandas as pd
import numpy as np
sys.path.append('source/lib/python')

# Create minimal test dataset
n_points = 150
phase_percent = np.linspace(0, 100, n_points)
test_data = pd.DataFrame({
    'subject': ['SUB01'] * n_points,
    'task': ['level_walking'] * n_points,
    'step': [0] * n_points,
    'phase_percent': phase_percent,
    'hip_flexion_angle_ipsi_rad': 0.3 * np.sin(2 * np.pi * phase_percent / 100),
    'knee_flexion_angle_ipsi_rad': 0.8 * np.sin(2 * np.pi * phase_percent / 100),
    'ankle_flexion_angle_ipsi_rad': 0.2 * np.sin(2 * np.pi * phase_percent / 100)
})

# Save test data
test_data.to_parquet('test_basic_functionality.parquet')

# Test library loading
try:
    from locomotion_analysis import LocomotionData
    loco = LocomotionData('test_basic_functionality.parquet', phase_col='phase_percent')
    print(f'✓ Loaded test data: {len(loco.df)} rows')
    print(f'✓ Found subjects: {loco.subjects}')
    print(f'✓ Found tasks: {loco.tasks}') 
    print(f'✓ Found features: {len(loco.features)} features')
    print('✓ Basic library functionality test passed')
except Exception as e:
    print(f'✗ Basic library test failed: {e}')
    exit(1)
"

    - name: Test validation system functionality (basic)
      run: |
        # Test basic validation functionality
        python -c "
import sys
import numpy as np
sys.path.append('source')

try:
    from validation.step_classifier import StepClassifier
    
    # Initialize classifier
    classifier = StepClassifier()
    print('✓ StepClassifier initialized')
    
    # Test basic methods exist
    assert hasattr(classifier, 'kinematic_feature_map'), 'Missing kinematic_feature_map'
    assert hasattr(classifier, 'kinetic_feature_map'), 'Missing kinetic_feature_map'
    print('✓ Required attributes present')
    
    # Test feature mappings
    assert 'hip_flexion_angle_ipsi_rad' in classifier.kinematic_feature_map, 'Missing standard naming support'
    assert 'hip_flexion_angle_ipsi' in classifier.kinematic_feature_map, 'Missing legacy naming support'
    print('✓ Both standard and legacy naming supported')
    
    print('✓ Basic validation system test passed')
except Exception as e:
    print(f'✗ Validation system test failed: {e}')
    exit(1)
"

    - name: Test file structure and documentation
      run: |
        # Check that key files exist
        echo "Checking project structure..."
        test -f source/lib/python/locomotion_analysis.py || (echo "LocomotionData library missing" && exit 1)
        test -f source/validation/step_classifier.py || (echo "StepClassifier missing" && exit 1)
        test -f docs/standard_spec/standard_spec.md || (echo "Standard spec missing" && exit 1)
        test -f docs/tutorials/python/getting_started_python.md || (echo "Python tutorial missing" && exit 1)
        
        echo "✓ All required files present"

    - name: Basic syntax validation (informational)
      run: |
        # Basic Python syntax check (non-failing)
        echo "Checking Python syntax..."
        python -m py_compile source/lib/python/locomotion_analysis.py || echo "Syntax issues in library"
        python -m py_compile source/validation/step_classifier.py || echo "Syntax issues in validation"
        
        echo "✓ Basic syntax checks completed"

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-outputs-python-${{ matrix.python-version }}
        path: |
          test_basic_functionality.parquet
        retention-days: 3

  matlab-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate MATLAB library structure
      run: |
        # Check that MATLAB files exist and have proper structure
        echo "Validating MATLAB library files..."
        
        # Check for required MATLAB files
        test -f source/lib/matlab/LocomotionData.m || (echo "LocomotionData.m not found" && exit 1)
        test -f docs/tutorials/matlab/getting_started_matlab.md || (echo "MATLAB tutorial not found" && exit 1)
        
        # Basic file content validation
        grep -q "classdef LocomotionData" source/lib/matlab/LocomotionData.m || (echo "Invalid MATLAB class structure" && exit 1)
        
        echo "✓ MATLAB library structure validation passed"

    - name: Check MATLAB tutorial documentation
      run: |
        # Verify tutorial documentation exists and has expected content
        echo "Checking MATLAB tutorial documentation..."
        
        grep -q "LocomotionData" docs/tutorials/matlab/getting_started_matlab.md || (echo "Tutorial missing LocomotionData reference" && exit 1)
        grep -q "parquet" docs/tutorials/matlab/getting_started_matlab.md || (echo "Tutorial missing parquet reference" && exit 1)
        
        echo "✓ MATLAB tutorial documentation validation passed"