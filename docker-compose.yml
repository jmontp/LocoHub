# Docker Compose for Locomotion Data Analysis Development Environment
#
# Created: 2025-06-20 with user permission
# Purpose: Complete development stack for locomotion data analysis
#
# Intent: Provide easy-to-use development environment with MATLAB, Python,
# monitoring, and data processing capabilities for local development and testing.

version: '3.8'

networks:
  locomotion-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Data volumes
  locomotion-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  locomotion-output:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./output
  
  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # Database volumes
  postgres-data:
    driver: local

services:
  # MATLAB Development Environment
  matlab-dev:
    build:
      context: .
      dockerfile: containers/matlab-dev.Dockerfile
    container_name: locomotion-matlab-dev
    hostname: matlab-dev
    networks:
      - locomotion-network
    volumes:
      - locomotion-data:/opt/locomotion/data:ro
      - locomotion-output:/opt/locomotion/output
      - ./logs:/opt/locomotion/logs
      - ./source/lib/matlab:/opt/locomotion/matlab
      - ./docs/tutorials/matlab:/opt/locomotion/docs/matlab
    environment:
      - MLM_LICENSE_FILE=${MATLAB_LICENSE_SERVER:-27000@localhost}
      - MATLAB_PREFDIR=/tmp/.matlab
      - LOCOMOTION_LIB=/opt/locomotion
      - PROMETHEUS_METRICS_PORT=9091
    ports:
      - "9091:9091"  # Metrics
      - "8080:8080"  # Health check
    shm_size: 512m
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=9091"
      - "prometheus.path=/metrics"

  # Python Analysis Environment  
  python-analysis:
    build:
      context: .
      dockerfile: containers/python-analysis.Dockerfile
    container_name: locomotion-python-analysis
    hostname: python-analysis
    networks:
      - locomotion-network
    volumes:
      - locomotion-data:/opt/locomotion/data:ro
      - locomotion-output:/opt/locomotion/output
      - ./logs:/opt/locomotion/logs
      - ./lib:/opt/locomotion/python
      - ./docs/tutorials/python:/opt/locomotion/docs/python
    environment:
      - PYTHONPATH=/opt/locomotion/python
      - LOCOMOTION_LIB=/opt/locomotion
      - PROMETHEUS_METRICS_PORT=8000
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8000:8000"  # Metrics
    restart: unless-stopped
    depends_on:
      - matlab-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8000"
      - "prometheus.path=/metrics"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: locomotion-prometheus
    hostname: prometheus
    networks:
      - locomotion-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - matlab-dev
      - python-analysis

  # Grafana Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: locomotion-grafana
    hostname: grafana
    networks:
      - locomotion-network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboard-system.json:/etc/grafana/provisioning/dashboards/system.json:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_ANALYTICS_REPORTING_ENABLED=false
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: locomotion-node-exporter
    hostname: node-exporter
    networks:
      - locomotion-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: locomotion-cadvisor
    hostname: cadvisor
    networks:
      - locomotion-network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8081:8080"
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg

  # PostgreSQL for metadata storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: locomotion-postgres
    hostname: postgres
    networks:
      - locomotion-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./monitoring/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    environment:
      - POSTGRES_DB=locomotion_analysis
      - POSTGRES_USER=locomotion
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-locomotion123}
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U locomotion -d locomotion_analysis"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: locomotion-nginx
    hostname: nginx
    networks:
      - locomotion-network
    volumes:
      - ./monitoring/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      - grafana
      - python-analysis

# Health check service to monitor overall stack health
  healthcheck:
    image: alpine:latest
    container_name: locomotion-healthcheck
    networks:
      - locomotion-network
    command: |
      sh -c "
        while true; do
          echo 'Checking service health...'
          curl -f http://matlab-dev:8080/health || echo 'MATLAB service unhealthy'
          curl -f http://python-analysis:8000/health || echo 'Python service unhealthy'
          curl -f http://prometheus:9090/-/healthy || echo 'Prometheus unhealthy'
          curl -f http://grafana:3000/api/health || echo 'Grafana unhealthy'
          sleep 60
        done
      "
    restart: unless-stopped
    depends_on:
      - matlab-dev
      - python-analysis
      - prometheus
      - grafana